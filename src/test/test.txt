import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.time.Duration;
import java.util.List;
import java.util.Random;
import java.util.LinkedHashMap;

public class YourClass {

    private WebDriver driver;
    private By checkboxLocator; // Assuming you have this locator defined
    private int waitTime = 10; // Example wait time in seconds

    // Constructor to initialize the WebDriver
    public YourClass(WebDriver driver) {
        this.driver = driver;
    }

    // Method to get the WebDriver instance
    protected WebDriver getDriver() {
        return this.driver;
    }

    /**
     * Sorts a table column based on the column name and sort order.
     * @param columnName The name of the column to sort.
     * @param sortOrder The order to sort the column (e.g., "asc" for ascending, "desc" for descending).
     * @throws Exception If an error occurs during sorting.
     */
    public void sortTableColumn(String columnName, String sortOrder) throws Exception {
        // Implementation here
    }

    /**
     * Stores the results of a table.
     * @throws Exception If an error occurs while storing results.
     */
    public void storeResults() throws Exception {
        // Implementation here
    }

    /**
     * Gets the indices of columns in a table.
     * @param columnHeadersLocator The locator for the column headers.
     * @return A LinkedHashMap where the key is the column name and the value is the column index.
     */
    public LinkedHashMap<String, Integer> getColumnIndices(By columnHeadersLocator) {
        // Implementation here
        return new LinkedHashMap<>();
    }

    /**
     * Gets the text of a specific column.
     * @param columnDataLocator The locator for the column data.
     * @return A list of strings containing the text of each cell in the column.
     */
    public List<String> getColumnText(By columnDataLocator) {
        // Implementation here
        return List.of();
    }

    /**
     * Compares two lists of strings.
     * @param list1 The first list.
     * @param list2 The second list.
     * @return True if the lists are equal, otherwise false.
     */
    public boolean compareLists(List<String> list1, List<String> list2) {
        // Implementation here
        return list1.equals(list2);
    }

    /**
     * Sorts a list of strings in ascending order.
     * @param list The list to sort.
     * @return The sorted list.
     */
    public List<String> sortAscending(List<String> list) {
        // Implementation here
        list.sort(String::compareTo);
        return list;
    }

    /**
     * Sorts a list of strings in descending order.
     * @param list The list to sort.
     * @return The sorted list.
     */
    public List<String> sortDescending(List<String> list) {
        // Implementation here
        list.sort((a, b) -> b.compareTo(a));
        return list;
    }

    /**
     * Gets all checkboxes on the page.
     * @return A list of WebElements representing the checkboxes.
     */
    public List<WebElement> getAllCheckboxes() {
        return driver.findElements(checkboxLocator);
    }

    /**
     * Selects all checkboxes on the page.
     */
    public void selectAllCheckboxes() {
        List<WebElement> checkboxes = getAllCheckboxes();
        for (WebElement checkbox : checkboxes) {
            if (!checkbox.isSelected()) {
                // Assuming JUtil.highlightElement is a valid method in your utils
                JUtil.highlightElement(checkbox);
                checkbox.click();
            }
        }
    }

    /**
     * Selects a specified number of checkboxes.
     * @param numberOfCheckboxes The number of checkboxes to select.
     */
    public void selectNumberOfCheckboxes(int numberOfCheckboxes) {
        // Implementation here
    }

    /**
     * Selects a random set of checkboxes.
     * @param numberOfCheckboxes The number of checkboxes to select randomly.
     */
    public void selectRandomCheckboxes(int numberOfCheckboxes) {
        List<WebElement> checkboxes = getAllCheckboxes();
        Random random = new Random();
        for (int i = 0; i < numberOfCheckboxes; i++) {
            int randomIndex = random.nextInt(checkboxes.size());
            WebElement checkbox = checkboxes.get(randomIndex);
            if (!checkbox.isSelected()) {
                scrollElementIntoView(checkbox);
                checkbox.click();
            }
        }
    }

    /**
     * Unselects a specific checkbox.
     * @param checkbox The checkbox to unselect.
     */
    public void unselectCheckbox(WebElement checkbox) {
        if (checkbox.isSelected()) {
            checkbox.click();
        }
    }

    /**
     * Unselects all checkboxes on the page.
     */
    public void unselectAllCheckboxes() {
        List<WebElement> checkboxes = getAllCheckboxes();
        for (WebElement checkbox : checkboxes) {
            if (checkbox.isSelected()) {
                checkbox.click();
            }
        }
    }

    /**
     * Checks if the 'Select All' checkbox is checked.
     * @return True if the 'Select All' checkbox is checked, otherwise false.
     */
    public boolean isSelectAllCheckboxChecked() {
        WebElement selectAllCheckbox = getSelectAllCheckbox();
        scrollElementIntoView(selectAllCheckbox);
        return selectAllCheckbox.isSelected();
    }

    /**
         * Locates and returns the 'Select All' checkbox.
         * @return The 'Select All' checkbox WebElement.
         */
    private WebElement getSelectAllCheckbox() {
        // Implementation to locate and return the 'Select All' checkbox
        return driver.findElement(By.id("selectAllCheckbox")); // Example locator
    }

    /**
         * Scrolls a web element into view.
         * @param element The WebElement to scroll into view.
         */
    private void scrollElementIntoView(WebElement element) {
        // Implementation to scroll the element into view
        Actions actions = new Actions(driver);
        actions.moveToElement(element).perform();
    }
}



